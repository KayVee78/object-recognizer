function varargout = objectRecognizerGui(varargin)
% OBJECTRECOGNIZERGUI MATLAB code for objectRecognizerGui.fig
%      OBJECTRECOGNIZERGUI, by itself, creates a new OBJECTRECOGNIZERGUI or raises the existing
%      singleton*.
%
%      H = OBJECTRECOGNIZERGUI returns the handle to a new OBJECTRECOGNIZERGUI or the handle to
%      the existing singleton*.
%
%      OBJECTRECOGNIZERGUI('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in OBJECTRECOGNIZERGUI.M with the given input arguments.
%
%      OBJECTRECOGNIZERGUI('Property','Value',...) creates a new OBJECTRECOGNIZERGUI or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before objectRecognizerGui_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to objectRecognizerGui_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help objectRecognizerGui

% Last Modified by GUIDE v2.5 03-Jan-2025 20:45:45

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
    'gui_Singleton',  gui_Singleton, ...
    'gui_OpeningFcn', @objectRecognizerGui_OpeningFcn, ...
    'gui_OutputFcn',  @objectRecognizerGui_OutputFcn, ...
    'gui_LayoutFcn',  [] , ...
    'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before objectRecognizerGui is made visible.
function objectRecognizerGui_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to objectRecognizerGui (see VARARGIN)

% Choose default command line output for objectRecognizerGui
handles.output = hObject;

% Update handles structure
guidata(hObject, handles);

% UIWAIT makes objectRecognizerGui wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = objectRecognizerGui_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in uploadImageBtn.
function uploadImageBtn_Callback(hObject, eventdata, handles)
% hObject    handle to uploadImageBtn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Prompt the user to select an image file
[fileName, filePath] = uigetfile({'*.jpg;*.jpeg;*.png;*.bmp;*.tif;*.dcm;*.webp', 'Image Files (*.jpg, *.jpeg, *.png, *.bmp, *.tif, *.dcm, *.webp)'; '*.*', 'All Files (*.*)'}, ...
    'Select an Image');
% Checking if the user quits the file selection
if isequal(fileName, 0)
    errordlg('No file selected. Please select a valid image.', 'File Selection Error');
    return;
end

% Clear rest of the axes if trying to upload a new image
cla(handles.histogramAxes, 'reset');
cla(handles.enhancedImage, 'reset');
cla(handles.tumorDetectionMask, 'reset');
set(handles.contrastDisplayText, 'String', 'Contrast: ');
set(handles.weightsText, 'String', 'Weights: ');
set(handles.maxContrast, 'String', 'Maximum Contrast: ');

% Getting the full path of the selected file
fullPath = fullfile(filePath, fileName);

try
    if endsWith(fileName, '.webp', 'IgnoreCase', true)
        % Converts WebP to PNG using Python Script
        [~, name, ~] = fileparts(fileName);
        tempFilePath = fullfile(tempdir, [name '.png']);
        pythonCmd = sprintf('py read_webp.py "%s" "%s"', fullPath, tempFilePath);
        [status, cmdout] = system(pythonCmd);

        if status ~= 0
            error('Python conversion failed: %s', cmdout);
        end

        img = imread(tempFilePath); % Read the converted PNG file
    else
        img = imread(fullPath);
    end


    % Display the image in the specified axes
    axes(handles.uploadImageAxes); % Target axes
    imshow(img, []);               % Displays the image
    title(handles.uploadImageAxes, 'Uploaded Image'); % Title of the respective axes



    % Store the uploaded image in the handles structure for later
    handles.ImageData = img;

    % Save the updated handles structure
    guidata(hObject, handles);

catch ME
    % Handle errors in loading or displaying the image
    errordlg(['Failed to upload image: ', ME.message], 'File Upload Error');
end

% --- Executes on button press in calculateContrastBtn.
function calculateContrastBtn_Callback(hObject, eventdata, handles)
% hObject    handle to calculateContrastBtn (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Checking if image data is loaded
if isfield(handles, 'ImageData') && ~isempty(handles.ImageData)
    % Calculate the contrast using the RMS method
    contrastValue = calculateRMSContrast(handles.ImageData);

    % Display the contrast value
    set(handles.contrastDisplayText, 'String', sprintf('Contrast: %.4f', contrastValue));
else
    % Show error if no image is loaded
    errordlg('No image uploaded. Please upload an image.', 'Image Not Loaded');
end


% --- Executes on button press in convertToGrayscaleBtn.
function convertToGrayscaleBtn_Callback(hObject, eventdata, handles)
% Checking if the image is loaded
if isfield(handles, 'ImageData') && ~isempty(handles.ImageData)
    % Convert the image to grayscale and get the weights
    [grayImage, weights] = convertToGrayscale(handles.ImageData);

    % Store the grayscale image in handles for later
    handles.GrayImage = grayImage;

    % Update handles structure
    guidata(hObject, handles);

    % Display the grayscale image in the specified axes
    axes(handles.uploadImageAxes);
    imshow(grayImage, []);
    title(handles.uploadImageAxes, 'Grayscale Image');

    % Display the weights
    set(handles.weightsText, 'String', ...
        sprintf('Weights: R=%.4f, G=%.4f, B=%.4f', weights(1), weights(2), weights(3)));
    set(handles.maxContrast, 'String', ...
        sprintf('Maximum Contrast: %.4f', weights(4)));
else
    % Show error if no image is loaded
    errordlg('No image uploaded. Please upload an image.', 'Image Not Loaded');
end



% --- Executes on button press in generateHistogram.
function generateHistogram_Callback(hObject, eventdata, handles)
% Check if the grayscale image is available in handles strcuture
if isfield(handles, 'GrayImage') && ~isempty(handles.GrayImage)
    % Retrieve the stored grayscale image
    grayImage = handles.GrayImage;
else
    if isfield(handles, 'ImageData') && ~isempty(handles.ImageData)
        img = handles.ImageData;
        grayImage = rgb2gray(img);
    else
        % Display an error if no grayscale image is available
        errordlg('No valid image data available in handles.', 'Error');
    end
end

% Generate the histogram using the custom function 'generateHistogram'
histData = generateHistogram(grayImage);

% Plots the histogram in the specified axes'histogramAxes'
axes(handles.histogramAxes);
bar(0:255, histData, 'BarWidth', 1, 'FaceColor', 'k');
xlabel('Pixel Intensity');
ylabel('Frequency');
title('Histogram of Grayscale Image');
xlim([0 255]);


% --- Executes on button press in enhanceTumorEdges.
function enhanceTumorEdges_Callback(hObject, eventdata, handles)
% hObject handle to enhanceTumorEdges (see GCBO)
% eventdata reserved - to be defined in a future version of MATLAB
% handles structure with handles and user data (see GUIDATA)

% Check if the image is loaded
if isfield(handles, 'ImageData') && ~isempty(handles.ImageData)
    % Check if GrayImage is already stored
    if isfield(handles, 'GrayImage') && ~isempty(handles.GrayImage)
        img = handles.GrayImage; % Use the pre-stored grayscale image
    else
        img = handles.ImageData; % Retrieve the originally uploaded image
        if size(img, 3) == 3 % Check if it's RGB
            img = rgb2gray(img); % Convert to grayscale if needed
        end
    end

    % Thresholding: Adaptive thresholding for binarization
    binarizedImg = imbinarize(img, 'adaptive', 'Sensitivity', 0.59);

    % Pre-processing: Apply median filter to reduce noise
    filteredImg = medfilt2(binarizedImg, [5, 5]);

    % Morphological filtering: Remove noise and enhance tumor edges
    structuringElement = strel('disk', 3);
    cleanedImg = imopen(filteredImg, structuringElement); % Remove small noise
    enhancedImg = imclose(cleanedImg, structuringElement); % Fill small gaps

    % Getting dimensions of the image
    xSize = size(img, 2);
    ySize = size(img, 1);

    % Calculating the center of the image
    xCenter = xSize / 2; % Horizontal center coordinate
    yCenter = ySize / 2; % Vertical center coordinate
    
    % Defining radius for an elliptical mask
    xRadius = xCenter - 40; % Horizontal radius of the ellipse (adjusted a bit smaller than half the width)
    yRadius = yCenter - 50; % Vertical radius of the ellipse (adjusted a bit smaller than half the height)

    % Create a grid of coordinates representing the image dimensions
    % obtained above
    [col, row] = meshgrid(1:xSize, 1:ySize);
    mask = ((row - yCenter).^2 ./ yRadius^2) + ((col - xCenter).^2 ./ xRadius^2) <= 1;
    tumorMask = logical(enhancedImg .* mask);
    tumorMask = bwareafilt(tumorMask, [700 4000]);
    maskStructuring = strel('disk', 6);
    tumorMask = imclose(tumorMask, maskStructuring);
    tumorMask = imfill(tumorMask, 'holes');

    % Display the enhanced image, which went through Thresholding,
    % Pre-processing and Morphological filtering
    axes(handles.enhancedImage);
    imshow(enhancedImg);
    title('Enhanced Image');

    % Display tumor detection mask with boundaries
    axes(handles.tumorDetectionMask);
    imshow(tumorMask);
    title('Tumor Detection Mask');
    
    hold on;
    % Detect and overlay boundaries
    boundaries = bwboundaries(tumorMask, 'noholes');
    for k = 1:length(boundaries)
        plot(boundaries{k}(:, 2), boundaries{k}(:, 1), 'Color', [1, 0, 1], 'LineWidth', 1.5);
    end
    hold off;

    % Store the enhanced image and tumor mask in the handles structure for future use
    handles.StoreEnhancedImage = enhancedImg;
    handles.StoreTumorMask = tumorMask;
    guidata(hObject, handles);

else
    % Show error if no image is loaded
    errordlg('No image uploaded. Please upload an image.', 'Image Not Loaded');

end

